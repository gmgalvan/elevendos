// Code generated by MockGen. DO NOT EDIT.
// Source: lab/productLab/internal/transport (interfaces: ProductUC)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "lab/productLab/internal/entity"
	reflect "reflect"
)

// MockProductUC is a mock of ProductUC interface
type MockProductUC struct {
	ctrl     *gomock.Controller
	recorder *MockProductUCMockRecorder
}

// MockProductUCMockRecorder is the mock recorder for MockProductUC
type MockProductUCMockRecorder struct {
	mock *MockProductUC
}

// NewMockProductUC creates a new mock instance
func NewMockProductUC(ctrl *gomock.Controller) *MockProductUC {
	mock := &MockProductUC{ctrl: ctrl}
	mock.recorder = &MockProductUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductUC) EXPECT() *MockProductUCMockRecorder {
	return m.recorder
}

// ByID mocks base method
func (m *MockProductUC) ByID(arg0 context.Context, arg1 int) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID
func (mr *MockProductUCMockRecorder) ByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockProductUC)(nil).ByID), arg0, arg1)
}

// Create mocks base method
func (m *MockProductUC) Create(arg0 context.Context, arg1 *entity.Product) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProductUCMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductUC)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockProductUC) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductUCMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductUC)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (m *MockProductUC) List(arg0 context.Context, arg1, arg2 int) ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockProductUCMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProductUC)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockProductUC) Update(arg0 context.Context, arg1 int, arg2 *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProductUCMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductUC)(nil).Update), arg0, arg1, arg2)
}
